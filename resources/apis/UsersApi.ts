/* tslint:disable */
/* eslint-disable */
/**
 * users-svc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUser201Response,
  CreateUserRequest,
  Errors,
  GetUsersList200Response,
  GetUsersList400Response,
} from '../models';
import {
    CreateUser201ResponseFromJSON,
    CreateUser201ResponseToJSON,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
    GetUsersList200ResponseFromJSON,
    GetUsersList200ResponseToJSON,
    GetUsersList400ResponseFromJSON,
    GetUsersList400ResponseToJSON,
} from '../models';

export interface CreateUserOperationRequest {
    createUserRequest?: CreateUserRequest;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUsersListRequest {
    pageLimit?: number;
    pageNumber?: number;
    pageOrder?: GetUsersListPageOrderEnum;
    filterName?: Array<string>;
    filterAge?: Array<number>;
    filterRole?: Array<boolean>;
}

export interface UpdateUserRequest {
    id: number;
    createUserRequest?: CreateUserRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create User
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUser201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integrations/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.createUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUser201ResponseFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUser(requestParameters: CreateUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUser201Response> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete User
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete User
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Get User
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUser201Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUser201ResponseFromJSON(jsonValue));
    }

    /**
     * Get User
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUser201Response> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Users
     */
    async getUsersListRaw(requestParameters: GetUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersList200Response>> {
        const queryParameters: any = {};

        if (requestParameters.pageLimit !== undefined) {
            queryParameters['page[limit]'] = requestParameters.pageLimit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['page[number]'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageOrder !== undefined) {
            queryParameters['page[order]'] = requestParameters.pageOrder;
        }

        if (requestParameters.filterName) {
            queryParameters['filter[name]'] = requestParameters.filterName;
        }

        if (requestParameters.filterAge) {
            queryParameters['filter[age]'] = requestParameters.filterAge;
        }

        if (requestParameters.filterRole) {
            queryParameters['filter[role]'] = requestParameters.filterRole;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersList200ResponseFromJSON(jsonValue));
    }

    /**
     * List Users
     */
    async getUsersList(requestParameters: GetUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersList200Response> {
        const response = await this.getUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update User
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integrations/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.createUserRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update User
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetUsersListPageOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetUsersListPageOrderEnum = typeof GetUsersListPageOrderEnum[keyof typeof GetUsersListPageOrderEnum];
