/* tslint:disable */
/* eslint-disable */
/**
 * users-svc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrorsErrorsInner
 */
export interface ErrorsErrorsInner {
    /**
     * Title is a short, human-readable summary of the problem
     * @type {string}
     * @memberof ErrorsErrorsInner
     */
    title: string;
    /**
     * Detail is a human-readable explanation specific to this occurrence of the problem
     * @type {string}
     * @memberof ErrorsErrorsInner
     */
    detail?: string;
    /**
     * Status is the HTTP status code applicable to this problem
     * @type {number}
     * @memberof ErrorsErrorsInner
     */
    status: ErrorsErrorsInnerStatusEnum;
}


/**
 * @export
 */
export const ErrorsErrorsInnerStatusEnum = {
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_409: 409,
    NUMBER_500: 500
} as const;
export type ErrorsErrorsInnerStatusEnum = typeof ErrorsErrorsInnerStatusEnum[keyof typeof ErrorsErrorsInnerStatusEnum];


/**
 * Check if a given object implements the ErrorsErrorsInner interface.
 */
export function instanceOfErrorsErrorsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ErrorsErrorsInnerFromJSON(json: any): ErrorsErrorsInner {
    return ErrorsErrorsInnerFromJSONTyped(json, false);
}

export function ErrorsErrorsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorsErrorsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'detail': !exists(json, 'detail') ? undefined : json['detail'],
        'status': json['status'],
    };
}

export function ErrorsErrorsInnerToJSON(value?: ErrorsErrorsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'detail': value.detail,
        'status': value.status,
    };
}

