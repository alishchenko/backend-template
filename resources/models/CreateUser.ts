/* tslint:disable */
/* eslint-disable */
/**
 * users-svc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateUserAllOfAttributes } from './CreateUserAllOfAttributes';
import {
    CreateUserAllOfAttributesFromJSON,
    CreateUserAllOfAttributesFromJSONTyped,
    CreateUserAllOfAttributesToJSON,
} from './CreateUserAllOfAttributes';

/**
 * 
 * @export
 * @interface CreateUser
 */
export interface CreateUser {
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    type: CreateUserTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    id: string;
    /**
     * 
     * @type {CreateUserAllOfAttributes}
     * @memberof CreateUser
     */
    attributes: CreateUserAllOfAttributes;
}


/**
 * @export
 */
export const CreateUserTypeEnum = {
    CreateUsers: 'create-users'
} as const;
export type CreateUserTypeEnum = typeof CreateUserTypeEnum[keyof typeof CreateUserTypeEnum];


/**
 * Check if a given object implements the CreateUser interface.
 */
export function instanceOfCreateUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "attributes" in value;

    return isInstance;
}

export function CreateUserFromJSON(json: any): CreateUser {
    return CreateUserFromJSONTyped(json, false);
}

export function CreateUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'attributes': CreateUserAllOfAttributesFromJSON(json['attributes']),
    };
}

export function CreateUserToJSON(value?: CreateUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'id': value.id,
        'attributes': CreateUserAllOfAttributesToJSON(value.attributes),
    };
}

